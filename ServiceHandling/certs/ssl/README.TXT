----------------------
---- JBOSS + SSL -----
----------------------
- $ v.1.0 10.01.2005 -
----------------------

1.
To integrate the SSL support into JBOSS appl. server first the certificates
for both the client and the server has to be created.
-> run the "gen-both-keystores.cmd" batch file
It should generate two keystore files:
	server.keystore - server part password=server
	client.keystore - client part password=client
The certificate data can be changed by changing the batch file.

2.
The next step is to import/export the public keys.
-> run the "distribute-public-keys.cmd" batch file - the coming two question schould
	be answered with "YES"
The public key of the client, stored in client.cer, will be exported 
into the server keystore and the public key of the server, stored 
in server.cer, will be imported into client keystore.
On this way both the server and the client have the corresponding public
key of the  communication partner.
NOTE! 
The certificates stored in the keystores can be viewed (listed) by running
the "list-keystore.cmd".

3.
The distribution and installing of the certificates/keystores is the next step
of the installation.
3a
On the SERVER SIDE (JBoss side) the file "server.keystore" should be copied into
"conf" directory of the working server profile - normally "default". (Further it will
be assumed that JBOSS_HOME depicts the install directory of the server and the default
configuration is the current working configuration of the JBOSS server).At the moment
we are about only to use the HTTP over SSL, thus first only the embedded Tomcat
instance should be configured. To do this, edit please the Tomcat server config file under
%JBOSS_HOME%\server\default\deploy\jbossweb-tomcat50.sar\server.xml
and uncomment following text fragment:
     <!-- SSL/TLS Connector configuration using the admin devl guide keystore -->
      <Connector port="8443" address="${jboss.bind.address}"
           maxThreads="100" minSpareThreads="5" maxSpareThreads="15"
           scheme="https" secure="true" clientAuth="false"
           keystoreFile="${jboss.server.home.dir}/conf/chap8.keystore"
           keystorePass="rmi+ssl" sslProtocol = "TLS" />
      <!-- -->
As next step please provide the "keystoreFile" attribute with the correct value:
	keystoreFile="${jboss.server.home.dir}/conf/server.keystore"
the same with the "keystorePass" attribute
	keystorePass="server" sslProtocol = "TLS" />
	
By using the default values it should looks like the following snippets:
      <!-- SSL/TLS Connector configuration using the admin devl guide keystore -->
      <Connector port="8443" address="${jboss.bind.address}"
           maxThreads="100" minSpareThreads="5" maxSpareThreads="15"
           scheme="https" secure="true" clientAuth="false"
           keystoreFile="${jboss.server.home.dir}/conf/server.keystore"
           keystorePass="server" sslProtocol = "TLS" />
      <!-- -->

NOTE!
If you has changed the default values in the scripts, please input your setting instead
of the those introduced below.

After the jboss has been restarted, the SSL should be activated for the web server. 
You can test ist by calling the following url:
	https://localhost:8443/
3b
The last step is the integration of the SSL on the CLIENT SIDE. In the example 
the client is JAVA based.
The protocol has to be activated:
	System.setProperty("java.protocol.handler.pkgs",
		   	   "com.sun.net.ssl.internal.www.protocol");
and the keystore has to be make known to the client:
        System.setProperty("javax.net.ssl.trustStore","./client.keystore");

In the example we are using the stubs classes generated by the axis. The important
thing is to take care, that the endpoint URL is using the right protocol and port,
thus either the WSDL file using for generating the stub files has to contain the right url:
	[...]
	<wsdl:service name="TestWS1EndpointService">
      	<wsdl:port name="WS1" binding="impl:WS1SoapBinding">
        <wsdlsoap:address location="https://localhost:8443/ws4ee/services/ws1"/>
      	</wsdl:port>
   	</wsdl:service>
   	[...]
 or the url has to be provided by the client:
 	[...]
	TestWS1EndpointService locator = new TestWS1EndpointServiceLocator();
	URL url = new URL("https://localhost:8443/ws4ee/services/ws1");
	TestWS1Endpoint endpoint = locator.getWS1(url);
	[...]
 