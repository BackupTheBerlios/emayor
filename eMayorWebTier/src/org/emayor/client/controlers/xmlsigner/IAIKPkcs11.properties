# General properties of IAIKPkcs11

# uncomment one PKCS11_NATIVE_MODULE entry that fits your configuration, or create a new one
# it is REQUIRED !!! for the application to set this property, because there is no default

# IBM pure software implementation, just a rudimentary software implementation comming with IBM's PKCS#11 for Java
# PKCS11_NATIVE_MODULE = pseudotoken.dll

# GemSAFE, you may also try gclib.dll
# PKCS11_NATIVE_MODULE = pk2priv.dll
# PKCS11_NATIVE_MODULE = gclib.dll

# Dallas Semiconductors, iButton; version 1.01 of this library has a bug in its sign function; it may not work for signing with this provider
# PKCS11_NATIVE_MODULE = dspkcs.dll

# Schlumberger Cryptoflex and Cyberflex Access
# PKCS11_NATIVE_MODULE = slbck.dll

# SeTec SeTokI cards
# PKCS11_NATIVE_MODULE = C:\\Program Files\\Setec\\SetTokI\\SetTokI.dll

# ActivCard cards
# PKCS11_NATIVE_MODULE = acpkcs.dll

# A-Sign premium cards; version 1.0 of this library is incomplete and has many bugs; it may not work with this provider
# PKCS11_NATIVE_MODULE = psepkcs11.dll

# ID2 PKCS#11 software
# PKCS11_NATIVE_MODULE = C:\\Data\\Development\\SmartCardIntegration\\PKCS11wrapper\\JavaToPKCS11\\demo\\test\\old\\id2cbox.dll

# SmartTrust PKCS#11 software
# PKCS11_NATIVE_MODULE = smartp11.dll

# Utimaco Cryptoki for SafeGuard
# PKCS11_NATIVE_MODULE = pkcs201n.dll

# Rainbow iKey 2000 series and for DataKey cards
# PKCS11_NATIVE_MODULE = dkck201.dll

# AET SafeSign for Rainbow iKey 3000 series and G&D StarCos 2.3 SPK cards
PKCS11_NATIVE_MODULE = aetpkss1.dll

# IBM Digital Signature for the Internet (DSI) for MFC cards 
# PKCS11_NATIVE_MODULE = CccSigIT.dll

# Eracom CSA hardware security module
# PKCS11_NATIVE_MODULE = C:\\Program Files\\ERACOM\\Cprov SDK\\bin\\csa\\cryptoki.dll

# Eracom CSA hardware security module (software emulation)
# PKCS11_NATIVE_MODULE = C:\\Program Files\\ERACOM\\Cprov SDK\\bin\\sw\\cryptoki.dll

# Oberthur AuthentIC 
# PKCS11_NATIVE_MODULE = AuCryptoki2-0.dll

# the ID of the slot to use (decimal), (you may use the GetInfo demo of the PKCS#11 wrapper to get the ID of a slot [e.g. card reader])
# if you omit this property, the provider uses the first slot with a token present, if there is no token available, it uses
# the first slot it finds.
# default: not set.
#SLOT_ID = 1000
#SLOT_ID = 1

# if this is set to true, the keystore will operate using a public session as long as possible. this
# will help preventing a PIN-prompt before the actual crypto operation starts.
# default: true
#LOGIN_KEYSTORE_SESSION_ON_DEMAND = true

# the key store uses this provider to hash certificates and generate key specs
# default: not set (use JCA defaults)
KEY_STORE_SUPPORT_PROVIDER = IAIK

# define, if the provider should check, if a requested algorithm is supported by
# the underlying PKCS#11 token. if enabled, it does not report the JCE algorithm as
# being provided. if disabled, the provider always reports all algorithms which are
# configured inthe iaik.pkcs.pkcs11.provider.IAIKPkcs11Algorithm.proprties. however,
# the provider will never report an algorithm as being supported which is not listed
# in this properties file.
# defualt: false
# CHECK_MECHANISM_SUPPORTED = true

# the full qualified class name of the delegation provider.
# if software delegation is enabled in general, an engine object of this provider 
# asks this handler for an implementation of an algorithm to which it can delegate the job. 
# an engine class can only use this handler, if it knows to which provider instance it belongs. 
# if it does not know, it uses the global delegate provider.
# default: iaik.pkcs.pkcs11.provider.DefaultDelegateProvider
# DELEGATE_PROVIDER = iaik.pkcs.pkcs11.provider.DefaultDelegateProvider

# the algorithms list of this provider
# this entry must be a relative path from a directory in the CLASSPATH,
# because this properties file is loaded via a ClassLoader
# default: iaik/pkcs/pkcs11/provider/IAIKPkcs11Algorithm.properties
# ALGORITHM_PROPERTIES = iaik/pkcs/pkcs11/provider/IAIKPkcs11Algorithm.properties

# the maximum number of sessions to keep in the session pool of the token manager.
# the token manager creates sessions on demand and not in advance. that means the 
# session pool is emtpy after start. only open sessions that are currently unused
# are kept in the pool to be able to reuse them on demand.
# must be >= 1. if it is smaller, 1 will be used instead.
# default: 100
SESSION_POOL_MAX_SIZE = 500
