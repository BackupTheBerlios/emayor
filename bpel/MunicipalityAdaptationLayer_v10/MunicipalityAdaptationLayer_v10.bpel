<!-- MunicipalityAdaptationLayer_v10 BPEL Process [Generated by the Oracle BPEL Designer] -->
<process name="MunicipalityAdaptationLayer_v10" targetNamespace="http://emayor.org/MunicipalityAdaptationLayer_v10" suppressJoinFailure="yes" xmlns="http://schemas.xmlsoap.org/ws/2003/03/business-process/" xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/" xmlns:tns="http://emayor.org/MunicipalityAdaptationLayer_v10" xmlns:ns4="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.ExtFunc" xmlns:ns1="http://interfaces.AdaptationLayer.eMayor.org" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:ns3="http://schemas.oracle.com/xpath/extension/ldap" xmlns:ns2="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20" xmlns:bpelx="http://schemas.oracle.com/bpel/extension" xmlns:ora="http://schemas.oracle.com/xpath/extension" xmlns:nsxml0="http://www.emayor.org/eMayorServiceRequest.xsd"><!-- ================================================================= --><!-- PARTNERLINKS                                                      --><!-- List of services participating in this BPEL process               --><!-- ================================================================= -->
 <partnerLinks><!-- The 'client' role represents the requester of this service. -->
  <partnerLink name="client" partnerLinkType="tns:MunicipalityAdaptationLayer_v10" myRole="MunicipalityAdaptationLayer_v10Provider"/>
  <partnerLink name="M2EPL" partnerRole="E2MServiceProvider" partnerLinkType="ns1:E2MService"/>
 </partnerLinks><!-- ================================================================= --><!-- VARIABLES                                                         --><!-- List of messages and XML documents used within this BPEL process  --><!-- ================================================================= -->
 <variables><!-- Reference to the message passed as input during initiation --><!-- 
          Reference to the message that will be returned to the requester
          -->
  <variable name="input" messageType="tns:MunicipalityAdaptationLayer_v10RequestMessage"/>
  <variable name="output" messageType="tns:MunicipalityAdaptationLayer_v10ResponseMessage"/>
  <variable name="request" type="xsd:string"/>
 </variables><!-- ================================================================= --><!-- ORCHESTRATION LOGIC                                               --><!-- Set of activities coordinating the flow of messages across the    --><!-- services integrated within this business process                  --><!-- ================================================================= -->
 <sequence name="main"><!-- Receive input from requester. 
             Note: This maps to operation defined in MunicipalityAdaptationLayer_v10.wsdl 
             -->
  <receive name="receiveInput" partnerLink="client" portType="tns:MunicipalityAdaptationLayer_v10" operation="process" variable="input" createInstance="yes"/><!-- Generate reply to synchronous request -->
  <scope name="processing">
   <variables>
    <variable name="invokeM2E_serviceRequestPropagator_InputVariable" messageType="ns1:ServiceRequestPropagatorRequestMessage"/>
    <variable name="invokeM2E_serviceRequestPropagator_OutputVariable" messageType="ns1:ServiceRequestPropagatorResponseMessage"/>
    <variable name="useEJBBinding" type="xsd:string"/>
    <variable name="docType" type="xsd:string"/>
   </variables>
   <sequence>
    <assign name="dummy">
     <copy>
      <from variable="input" part="payload" query="/tns:MunicipalityAdaptationLayer_v10Request"/>
      <to variable="output" part="payload" query="/tns:MunicipalityAdaptationLayer_v10Response"/>
     </copy>
    </assign>
    <assign name="prepareInput">
     <copy>
      <from variable="input" part="payload" query="/tns:MunicipalityAdaptationLayer_v10Request/nsxml0:reqestDocument"/>
      <to variable="request"/>
     </copy>
     <copy>
      <from expression="'1'"/>
      <to variable="invokeM2E_serviceRequestPropagator_InputVariable" part="documentType"/>
     </copy>
     <copy>
      <from expression="'NO'"/>
      <to variable="useEJBBinding"/>
     </copy>
    </assign>
    <bpelx:exec import="org.w3c.dom.Element"/>
    <bpelx:exec name="Java_Embedding_1" language="Java" version="1.4"><![CDATA[
    try {
    String docIn = (String)getVariableData("request");
    //System.out.println("got from input:\n" + docIn);
    String tmp = docIn.replaceAll("<","__EMAY__LT__");
    String docOut = tmp.replaceAll(">","__EMAY__GT__");
    //System.out.println("got output:\n" + docOut);
    setVariableData("request", docOut);
    //System.out.println("DONE");
    } catch (Exception ex) {
      ex.printStackTrace();
    }
]]>
    </bpelx:exec>
    <switch name="Switch_1">
     <case condition="bpws:getVariableData('useEJBBinding') = 'NO'">
      <bpelx:annotation>
       <bpelx:pattern>do not use EJB Binding
       </bpelx:pattern>
      </bpelx:annotation>
      <bpelx:exec import="java.util.Properties"/>
      <bpelx:exec import="javax.naming.InitialContext"/>
      <bpelx:exec import="javax.naming.Context"/>
      <bpelx:exec import="org.w3c.dom.Element"/>
      <bpelx:exec import="org.w3c.dom.NodeList"/>
      <bpelx:exec import="org.emayor.servicehandling.interfaces.E2MWrapperHome"/>
      <bpelx:exec import="org.emayor.servicehandling.interfaces.E2MWrapper"/>
      <bpelx:exec import="javax.rmi.PortableRemoteObject"/>
      <bpelx:exec name="EJBCall" language="Java" version="1.4"><![CDATA[//
  Context ctx = null;		
  Object ref = null;
  E2MWrapperHome home = null;
  E2MWrapper e2m = null;
  String result = null;
  Element documentAsElement = null;
  String documentAsString = null;

try {
  Properties props = new Properties();
  props.setProperty("javax.naming.factory.url.pkgs","org.jboss.naming:org.jnp.interfaces");
  props.setProperty(Context.INITIAL_CONTEXT_FACTORY, "org.jnp.interfaces.NamingContextFactory");
  props.setProperty(Context.PROVIDER_URL, "localhost:1099");
  
  System.out.println("get document");
  //documentAsElement = (Elemen) getVariableData("request");
  				
  documentAsString = (String) getVariableData("request");

  System.out.println("document    :"+documentAsString);
  
  System.out.println("get context");
  ctx = new InitialContext(props);
  System.out.println("lookup");
  ref = ctx.lookup("ejb/emayor/sh/E2MWrapper");
  System.out.println("get home");
  home = (E2MWrapperHome) PortableRemoteObject.narrow(ref, E2MWrapperHome.class);
  
  System.out.println("get local");
  e2m = home.create();
  
  System.out.println("get result");
  result = e2m.serviceRequestPropagator(documentAsString,"1");
  
} catch (Exception e) {

  e.printStackTrace();
  
  result = "<empty/>";

}

setVariableData("output","payload","/tns:MunicipalityAdaptationLayer_v10Response/nsxml0:reqestDocument",result);

]]>
      </bpelx:exec>
     </case>
     <otherwise>
      <sequence name="Sequence_1">
       <assign name="Assign_1">
        <copy>
         <from variable="request"/>
         <to variable="invokeM2E_serviceRequestPropagator_InputVariable" part="document"/>
        </copy>
       </assign>
       <invoke name="invokeM2E" partnerLink="M2EPL" portType="ns1:E2M" operation="serviceRequestPropagator" inputVariable="invokeM2E_serviceRequestPropagator_InputVariable" outputVariable="invokeM2E_serviceRequestPropagator_OutputVariable"/>
       <assign name="prepareOutput">
        <copy>
         <from variable="invokeM2E_serviceRequestPropagator_OutputVariable" part="ServiceRequestPropagatorReturn"/>
         <to variable="output" part="payload" query="/tns:MunicipalityAdaptationLayer_v10Response/nsxml0:reqestDocument"/>
        </copy>
       </assign>
      </sequence>
     </otherwise>
    </switch>
    <bpelx:exec import="org.w3c.dom.Element"/>
    <bpelx:exec import="org.apache.xpath.XPathAPI"/>
    <bpelx:exec import="javax.xml.parsers.DocumentBuilder"/>
    <bpelx:exec import="javax.xml.parsers.DocumentBuilderFactory"/>
    <bpelx:exec import="org.w3c.dom.Document"/>
    <bpelx:exec import="org.xml.sax.InputSource"/>
    <bpelx:exec import="java.io.StringReader"/>
    <bpelx:exec name="setDocumentTypeToExtraField4" language="Java" version="1.4"><![CDATA[System.out.println("get xml");

try {
Element node = (Element) getVariableData("output","payload","/tns:MunicipalityAdaptationLayer_v10Response/nsxml0:reqestDocument");

System.out.println("got element"+node.getNodeValue());

DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
DocumentBuilder builder = factory.newDocumentBuilder();

System.out.println("got builder");


Document root = builder.parse(new InputSource(new StringReader(node.getNodeValue())));

System.out.println("parse xml");

String docType = root.getDocumentElement().getNodeName();
//XPathAPI.selectSingleNode(root,"/").getNodeName();

if (docType.matches("^(.*?)Negativ(.*?)$")) {
  System.out.println("docType is negative: "+docType);
  setVariableData("output","payload","/tns:MunicipalityAdaptationLayer_v10Response/nsxml0:extraField4","5002");
  setVariableData("output","payload","/tns:MunicipalityAdaptationLayer_v10Response/nsxml0:extraField3","done");
} else if (docType.matches("^(.*?)ResidenceCertificationRequest(.*?)$")) {
  System.out.println("docType is request (ERROR on legacy system - setting negative flag): "+docType);
  setVariableData("output","payload","/tns:MunicipalityAdaptationLayer_v10Response/nsxml0:extraField4","5002");
} else {
  System.out.println("docType is positive: "+docType);
  setVariableData("output","payload","/tns:MunicipalityAdaptationLayer_v10Response/nsxml0:extraField4","5001");
}

} catch (Exception e) {
System.out.println("ERROR: "+e.getMessage());
e.printStackTrace();
setVariableData("output","payload","/tns:MunicipalityAdaptationLayer_v10Response/nsxml0:extraField4","5002");
}

]]>
    </bpelx:exec>
   </sequence>
  </scope>
  <reply name="replyOutput" partnerLink="client" portType="tns:MunicipalityAdaptationLayer_v10" operation="process" variable="output"/>
 </sequence>
</process>
