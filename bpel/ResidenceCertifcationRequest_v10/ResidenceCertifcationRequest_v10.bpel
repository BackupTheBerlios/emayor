<!-- ResidenceCertifcationRequest_v10 BPEL Process [Generated by the Oracle BPEL Designer]  -->
<process name="ResidenceCertifcationRequest_v10" targetNamespace="http://emayor.org/ResidenceCertifcationRequest_v10" suppressJoinFailure="yes" xmlns="http://schemas.xmlsoap.org/ws/2003/03/business-process/" xmlns:tns="http://emayor.org/ResidenceCertifcationRequest_v10" xmlns:ns4="http://www.emayor.org/NotificationBuilderRequest" xmlns:nsxml11="http://emayor.org/ForwardResponse_v10" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:nsxml9="http://emayor.org/ServiceCallbackManager" xmlns:ns5="http://www.emayor.org/eMayorNotificationBuilderRequest.xsd" xmlns:ora="http://schemas.oracle.com/xpath/extension" xmlns:ns9="http://emayor.org/NegativeResponse_v10" xmlns:ns1="http://schemas.oracle.com/xpath/extension/ldap" xmlns:nsxml1="http://emayor.org/ResidenceCertifcationRequest_v10/DC" xmlns:ns2="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.ExtFunc" xmlns:nsxml7="http://emayor.org/UserInteraction_v10" xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/" xmlns:nsxml4="http://emayor.org/CivilServantInteraction_v10" xmlns:ns7="http://emayor.org/FormatTransformation_v10" xmlns:nsxml2="http://schemas.xmlsoap.org/ws/2003/03/addressing" xmlns:nsxml5="http://emayor.org/ProcessStepAuthorization_v10" xmlns:ns6="http://xmlns.oracle.com/NotificationBuilderRequest" xmlns:nsxml10="http://emayor.org/ForwardRequest_v10" xmlns:nsxml6="http://www.emayor.org/ProcessStepAuthorization.xsd" xmlns:nsxml3="http://emayor.org/RCRLocalProcessing_v10" xmlns:ns3="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20" xmlns:bpelx="http://schemas.oracle.com/bpel/extension" xmlns:nsxml0="http://www.emayor.org/eMayorServiceRequest.xsd" xmlns:ns8="http://www.emayor.org/FormatTransformationSchema.xsd"><!-- ================================================================= --><!-- PARTNERLINKS                                                      --><!-- List of services participating in this BPEL process               --><!-- ================================================================= -->
 <partnerLinks><!--
        The 'client' role represents the requester of this service. It is 
        used for callback. The location and correlation information associated
        with the client role are automatically set using WS-Addressing.
        -->
  <partnerLink name="client" partnerLinkType="tns:ResidenceCertifcationRequest_v10" myRole="ResidenceCertifcationRequest_v10Provider"/>
  <partnerLink name="dataCollectionPL" partnerLinkType="nsxml1:ResidenceCertifcationRequest_v10_DC" partnerRole="ResidenceCertifcationRequest_v10_DCProvider" myRole="ResidenceCertifcationRequest_v10_DCRequester"/>
  <partnerLink name="localProcessingPL" partnerLinkType="nsxml3:RCRLocalProcessing_v10" partnerRole="RCRLocalProcessing_v10Provider" myRole="RCRLocalProcessing_v10Requester"/>
  <partnerLink name="civilServantPL" partnerLinkType="nsxml4:CivilServantInteraction_v10" partnerRole="CivilServantInteraction_v10Provider" myRole="CivilServantInteraction_v10Requester"/>
  <partnerLink name="userInteractionPL" partnerLinkType="nsxml7:UserInteraction_v10" partnerRole="UserInteraction_v10Provider" myRole="UserInteraction_v10Requester"/>
  <partnerLink name="callbackMgrPartnerLink" partnerLinkType="nsxml9:IServiceCallbackManagerLink" partnerRole="IServiceCallbackManagerProvider"/>
  <partnerLink name="forwardPL" partnerLinkType="nsxml10:ForwardRequest_v10" partnerRole="ForwardRequest_v10Provider" myRole="ForwardRequest_v10Requester"/>
  <partnerLink name="forwardResponsePL" partnerLinkType="nsxml11:ForwardResponse_v10" partnerRole="ForwardResponse_v10Provider" myRole="ForwardResponse_v10Requester"/>
  <partnerLink myRole="NotificationBuilderRequestRequester" name="notificationPL" partnerRole="NotificationBuilderRequestProvider" partnerLinkType="ns6:NotificationBuilderRequest"/>
  <partnerLink name="translationPL" partnerRole="FormatTransformation_v10Provider" partnerLinkType="ns7:FormatTransformation_v10"/>
  <partnerLink name="policyenforcerPL" partnerRole="PolicyEnforcer_v10Provider" partnerLinkType="tns:PolicyEnforcer_v10"/>
  <partnerLink name="negativeResponsePL" partnerRole="NegativeResponse_v10Provider" partnerLinkType="ns9:NegativeResponse_v10"/>
 </partnerLinks><!-- ================================================================= --><!-- VARIABLES --><!-- List of messages and XML documents used within this BPEL process  --><!-- ================================================================= -->
 <variables><!-- Reference to the message passed as input during initiation -->
  <variable name="input" messageType="tns:ResidenceCertifcationRequest_v10RequestMessage"/><!-- Reference to the message that will be sent back to the 
             requester during callback
             -->
  <variable name="requestData" messageType="tns:ResidenceCertifcationRequest_v10RequestMessage"/>
  <variable name="g_currentProcessStepStatus" type="xsd:string"/>
  <variable name="CV_RESIDENCE_CERTIFICATE_REQUEST" type="xsd:int"/>
  <variable name="CV_RESIDENCE_DOCUMENT" type="xsd:int"/>
  <variable name="callbackIn" messageType="nsxml9:onResultRequest"/>
  <variable name="callbackOut" messageType="nsxml9:onResultResponse"/>
  <variable name="wasForwarded" type="xsd:string"/>
  <variable name="localMunicipality" type="xsd:string"/>
  <variable name="servingMunicipality" type="xsd:string"/>
  <variable name="receivingMunicipality" type="xsd:string"/>
  <variable name="requestDocument" type="xsd:string"/>
  <variable name="g_currentDocumentType" type="xsd:int"/>
  <variable name="CV_NEGATIVE_DOCUMENT" type="xsd:int"/>
  <variable name="g_remoteServingPassed" type="xsd:string"/>
  <variable name="RequesterRole" type="xsd:string"/>
  <variable name="negativeDocumentAvailable" type="xsd:string"/>
  <variable name="requesterUID" type="xsd:string"/>
 </variables><!-- ================================================================= --><!-- ORCHESTRATION LOGIC                                               --><!-- Set of activities coordinating the flow of messages across the    --><!-- services integrated within this business process                  --><!-- ================================================================= -->
 <sequence name="main"><!-- Receive input from requestor. 
             Note: This maps to operation defined in ResidenceCertifcationRequest_v10.wsdl 
             -->
  <receive name="receiveInput" partnerLink="client" portType="tns:ResidenceCertifcationRequest_v10" operation="initiate" variable="input" createInstance="yes"/><!-- Asynchronous callback to the requester.
             Note: the callback location and correlation id is transparently handled 
             using WS-addressing.
             -->
  <assign name="GlobalDataPreparation">
   <copy>
    <from variable="input" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:uid"/>
    <to variable="requesterUID"/>
   </copy>
   <copy>
    <from variable="input" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:forwarded"/>
    <to variable="wasForwarded"/>
   </copy>
   <copy>
    <from variable="input" part="payload" query="/ResidenceCertifcationRequest_v10Request"/>
    <to variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request"/>
   </copy>
   <copy>
    <from expression="'open'"/>
    <to variable="g_currentProcessStepStatus"/>
   </copy>
   <copy>
    <from expression="1001"/>
    <to variable="CV_RESIDENCE_CERTIFICATE_REQUEST"/>
   </copy>
   <copy>
    <from expression="5001"/>
    <to variable="CV_RESIDENCE_DOCUMENT"/>
   </copy>
   <copy>
    <from expression="'5002'"/>
    <to variable="CV_NEGATIVE_DOCUMENT"/>
   </copy>
   <copy>
    <from variable="CV_RESIDENCE_CERTIFICATE_REQUEST"/>
    <to variable="g_currentDocumentType"/>
   </copy>
   <copy>
    <from expression="'NO'"/>
    <to variable="g_remoteServingPassed"/>
   </copy>
   <copy>
    <from expression="'no'"/>
    <to variable="negativeDocumentAvailable"/>
   </copy>
  </assign>
  <switch name="getInputDataIfNotForwarded">
   <case condition="bpws:getVariableData('wasForwarded') = 'NO'">
    <bpelx:annotation>
     <bpelx:pattern>was forwarded ?
     </bpelx:pattern>
    </bpelx:annotation>
    <sequence>
     <scope name="CollectingInputData">
      <variables>
       <variable name="dataCollectionIn" messageType="nsxml1:ResidenceCertifcationRequest_v10_DCRequestMessage"/>
       <variable name="dataCollectionOut" messageType="nsxml1:ResidenceCertifcationRequest_v10_DCResponseMessage"/>
      </variables>
      <sequence>
       <scope name="setDate">
        <sequence name="Sequence_37">
         <assign name="prepareInput">
          <copy>
           <from variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:reqestDocument"/>
           <to variable="requestDocument"/>
          </copy>
         </assign>
         <bpelx:exec name="setDate" language="Java" version="1.4"><![CDATA[// Java code snippet goes here ...
try {
System.out.println("----------------START-----------------------");
DecisionMaker decisionMaker = new DecisionMaker();
String xmlDocument = (String)getVariableData("requestDocument");
String result = decisionMaker.setRequestDate(xmlDocument);
setVariableData("requestDocument",result);
System.out.println("----------------DONE------------------------");
}catch(Exception ex) {
System.out.println("caught ex: "+ex.toString());
}
]]>
         </bpelx:exec>
         <assign name="prepareOutput">
          <copy>
           <from variable="requestDocument"/>
           <to variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:reqestDocument"/>
          </copy>
         </assign>
        </sequence>
       </scope>
       <assign name="prepareInput">
        <copy>
         <from variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request"/>
         <to variable="dataCollectionIn" part="payload" query="/nsxml1:ResidenceCertifcationRequest_v10_DCRequest"/>
        </copy>
        <copy>
         <from variable="CV_RESIDENCE_CERTIFICATE_REQUEST"/>
         <to variable="dataCollectionIn" part="docType" query="/nsxml1:DocumentType"/>
        </copy>
       </assign>
       <invoke name="requestInputDataToBeFilldIn" partnerLink="dataCollectionPL" portType="nsxml1:ResidenceCertifcationRequest_v10_DC" operation="initiate" inputVariable="dataCollectionIn"/>
       <receive name="receiveFilledAndSignedRequestDocument" partnerLink="dataCollectionPL" portType="nsxml1:ResidenceCertifcationRequest_v10_DCCallback" operation="onResult" variable="dataCollectionOut" createInstance="no"/>
       <assign name="readOutput">
        <copy>
         <from variable="dataCollectionOut" part="payload" query="/nsxml1:ResidenceCertifcationRequest_v10_DCResponse"/>
         <to variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request"/>
        </copy>
       </assign>
      </sequence>
     </scope>
     <scope name="verifySignature">
      <variables>
       <variable name="verificationIn" messageType="tns:SignedDocumentRequest"/>
       <variable name="verificationOut" messageType="tns:DecisionResponse"/>
      </variables>
      <sequence name="Sequence_25">
       <assign name="prepareInput">
        <copy>
         <from variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:reqestDocument"/>
         <to variable="verificationIn" part="signedXmlDocument" query="/tns:SignedXMLDocument/tns:xmlDocument"/>
        </copy>
        <copy>
         <from variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:uid"/>
         <to variable="verificationIn" part="signedXmlDocument" query="/tns:SignedXMLDocument/tns:userId"/>
        </copy>
        <copy>
         <from variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:ssid"/>
         <to variable="verificationIn" part="signedXmlDocument" query="/tns:SignedXMLDocument/tns:ssid"/>
        </copy>
       </assign>
       <invoke name="getVerification" partnerLink="policyenforcerPL" portType="tns:PolicyEnforcer_v10" operation="VerifyXMLSignature" inputVariable="verificationIn" outputVariable="verificationOut"/>
       <switch name="Switch_7">
        <case condition="bpws:getVariableData('verificationOut','decision','/tns:Decision')">
         <bpelx:annotation>
          <bpelx:pattern>signature ok
          </bpelx:pattern>
         </bpelx:annotation>
         <sequence name="Sequence_26">
          <empty name="signatureOK"/>
         </sequence>
        </case>
        <otherwise>
         <assign name="signatureNotOK">
          <copy>
           <from variable="CV_NEGATIVE_DOCUMENT"/>
           <to variable="g_currentDocumentType"/>
          </copy>
          <copy>
           <from expression="'50021'"/>
           <to variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:extraField1"/>
          </copy>
         </assign>
        </otherwise>
       </switch>
      </sequence>
     </scope>
    </sequence>
   </case>
   <otherwise>
    <empty name="DoNothing_DataForwarded"/>
   </otherwise>
  </switch>
  <scope name="prepareEnvironment">
   <sequence name="Sequence_8">
    <scope name="prepareMunicipalityVariables">
     <sequence name="Sequence_2">
      <assign name="prepareVariables">
       <copy>
        <from variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:reqestDocument"/>
        <to variable="requestDocument"/>
       </copy>
       <copy>
        <from expression="'NO'"/>
        <to variable="localMunicipality"/>
       </copy>
       <copy>
        <from expression="'NO'"/>
        <to variable="servingMunicipality"/>
       </copy>
       <copy>
        <from expression="'NO'"/>
        <to variable="receivingMunicipality"/>
       </copy>
      </assign>
      <bpelx:exec import="org.emayor.rcs.forward.DecisionMaker"/>
      <bpelx:exec name="prepareTranslationData" language="Java" version="1.4"><![CDATA[// Java code snippet goes here ...
try {
System.out.println("----------------START-----------------------");
String xmlDocument = (String)getVariableData("requestDocument");
System.out.println("got xml document: " + xmlDocument);
DecisionMaker decisionMaker = new DecisionMaker();
String result = decisionMaker.getReceivingMunicipality(xmlDocument);
System.out.println("got xml receiving municipality: " + result);
setVariableData("receivingMunicipality",result);
result = decisionMaker.getServingMunicipality(xmlDocument);
System.out.println("got xml serving municipality: " + result);
setVariableData("servingMunicipality",result);
result = decisionMaker.getLocalMunicipality();
System.out.println("got xml local municipality: " + result);
setVariableData("localMunicipality",result);
System.out.println("----------------DONE------------------------");
}catch(Exception ex) {
System.out.println("caught ex: "+ex.toString());
}]]>
      </bpelx:exec>
      <assign name="resetRequestDocument">
       <copy>
        <from variable="requestDocument"/>
        <to variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:reqestDocument"/>
       </copy>
      </assign>
     </sequence>
    </scope>
    <assign name="remapInput">
     <copy>
      <from variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request"/>
      <to variable="input" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request"/>
     </copy>
    </assign>
    <scope name="getRole">
     <variables>
      <variable name="Invoke_5_GetSignatureRole_InputVariable" messageType="tns:RoleRequest"/>
      <variable name="Invoke_5_GetSignatureRole_OutputVariable" messageType="tns:RoleResponse"/>
     </variables>
     <sequence name="Sequence_32">
      <assign name="prepare">
       <copy>
        <from variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:reqestDocument"/>
        <to variable="Invoke_5_GetSignatureRole_InputVariable" part="xmlDocument" query="/tns:XMLDocument"/>
       </copy>
      </assign>
      <invoke name="getRole" partnerLink="policyenforcerPL" portType="tns:PolicyEnforcer_v10" operation="GetSignatureRole" inputVariable="Invoke_5_GetSignatureRole_InputVariable" outputVariable="Invoke_5_GetSignatureRole_OutputVariable"/>
      <switch name="Switch_9">
       <case condition="bpws:getVariableData('Invoke_5_GetSignatureRole_OutputVariable','role','/tns:XMLDocument') = 'N/A'">
        <bpelx:annotation>
         <bpelx:pattern>role not given
         </bpelx:pattern>
        </bpelx:annotation>
        <assign name="assumeCitizen">
         <copy>
          <from expression="'Citizen'"/>
          <to variable="RequesterRole"/>
         </copy>
        </assign>
       </case>
       <otherwise>
        <assign name="setRole">
         <copy>
          <from variable="Invoke_5_GetSignatureRole_OutputVariable" part="role" query="/tns:XMLDocument"/>
          <to variable="RequesterRole"/>
         </copy>
        </assign>
       </otherwise>
      </switch>
     </sequence>
    </scope>
   </sequence>
  </scope>
  <scope name="civilServantApprovalIfNoTranslationRequest">
   <variables>
    <variable name="civilServantIn" messageType="nsxml4:CivilServantInteraction_v10RequestMessage"/>
    <variable name="civilServantOut" messageType="nsxml4:CivilServantInteraction_v10ResponseMessage"/>
   </variables>
   <sequence>
    <switch name="getCivilServantApproval">
     <case condition="(bpws:getVariableData('localMunicipality') != bpws:getVariableData('servingMunicipality')  and bpws:getVariableData('localMunicipality') = bpws:getVariableData('receivingMunicipality') and bpws:getVariableData('wasForwarded') != 'NO') or bpws:getVariableData('g_currentDocumentType') = bpws:getVariableData('CV_NEGATIVE_DOCUMENT') or (bpws:getVariableData('localMunicipality') = bpws:getVariableData('servingMunicipality')  and bpws:getVariableData('localMunicipality') = bpws:getVariableData('receivingMunicipality') and bpws:getVariableData('RequesterRole') = 'Civil Servant') or (bpws:getVariableData('localMunicipality') != bpws:getVariableData('servingMunicipality')  and bpws:getVariableData('localMunicipality') = bpws:getVariableData('receivingMunicipality') and bpws:getVariableData('RequesterRole') = 'Civil Servant') or (bpws:getVariableData('localMunicipality') = bpws:getVariableData('servingMunicipality')  and bpws:getVariableData('localMunicipality') != bpws:getVariableData('receivingMunicipality') and bpws:getVariableData('RequesterRole') = 'Civil Servant' and bpws:getVariableData('wasForwarded') = 'NO')">
      <bpelx:annotation>
       <bpelx:pattern>only translation from remote or negative result or citizen is delegate
       </bpelx:pattern>
      </bpelx:annotation>
      <empty name="forwarded_and_translation_required_or_negative_result_or_citizen_delegate"/>
     </case>
     <otherwise>
      <sequence name="Sequence_22">
       <sequence>
        <assign name="prepareInput">
         <copy>
          <from expression="'open'"/>
          <to variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:status"/>
         </copy>
         <copy>
          <from variable="CV_RESIDENCE_CERTIFICATE_REQUEST"/>
          <to variable="civilServantIn" part="docType" query="/nsxml4:DocumentType"/>
         </copy>
         <copy>
          <from variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request"/>
          <to variable="civilServantIn" part="payload" query="/nsxml4:CivilServantInteraction_v10Request"/>
         </copy>
         <copy>
          <from variable="requesterUID"/>
          <to variable="civilServantIn" part="payload" query="/nsxml4:CivilServantInteraction_v10Request/nsxml0:extraField4"/>
         </copy>
        </assign>
        <invoke name="invoke-3" partnerLink="civilServantPL" portType="nsxml4:CivilServantInteraction_v10" operation="initiate" inputVariable="civilServantIn"/>
        <receive createInstance="no" name="receive-3" partnerLink="civilServantPL" portType="nsxml4:CivilServantInteraction_v10Callback" operation="onResult" variable="civilServantOut"/>
        <assign name="prepareOutput">
         <copy>
          <from variable="civilServantOut" part="payload" query="/nsxml4:CivilServantInteraction_v10Response"/>
          <to variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request"/>
         </copy>
        </assign>
        <scope name="verifySignature">
         <variables>
          <variable name="verificationIn" messageType="tns:SignedDocumentRequest"/>
          <variable name="verificationOut" messageType="tns:DecisionResponse"/>
         </variables>
         <sequence name="Sequence_25">
          <assign name="prepareInput">
           <copy>
            <from variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:reqestDocument"/>
            <to variable="verificationIn" part="signedXmlDocument" query="/tns:SignedXMLDocument/tns:xmlDocument"/>
           </copy>
           <copy>
            <from variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:uid"/>
            <to variable="verificationIn" part="signedXmlDocument" query="/tns:SignedXMLDocument/tns:userId"/>
           </copy>
           <copy>
            <from variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:ssid"/>
            <to variable="verificationIn" part="signedXmlDocument" query="/tns:SignedXMLDocument/tns:ssid"/>
           </copy>
          </assign>
          <invoke name="getVerification" partnerLink="policyenforcerPL" portType="tns:PolicyEnforcer_v10" operation="VerifyXMLSignature" inputVariable="verificationIn" outputVariable="verificationOut"/>
          <switch name="Switch_7">
           <case condition="bpws:getVariableData('verificationOut','decision','/tns:Decision')">
            <bpelx:annotation>
             <bpelx:pattern>signature ok
             </bpelx:pattern>
            </bpelx:annotation>
            <sequence name="Sequence_26">
             <switch name="acceptedOrRejected">
              <case condition="bpws:getVariableData('requestData','payload','/tns:ResidenceCertifcationRequest_v10Request/nsxml0:status') = 'closed'">
               <bpelx:annotation>
                <bpelx:pattern>rejected
                </bpelx:pattern>
               </bpelx:annotation>
               <assign name="rejected">
                <copy>
                 <from variable="CV_NEGATIVE_DOCUMENT"/>
                 <to variable="g_currentDocumentType"/>
                </copy>
                <copy>
                 <from expression="'50023'"/>
                 <to variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:extraField1"/>
                </copy>
               </assign>
              </case>
              <otherwise>
               <empty name="accepted"/>
              </otherwise>
             </switch>
            </sequence>
           </case>
           <otherwise>
            <assign name="signatureNotOK">
             <copy>
              <from variable="CV_NEGATIVE_DOCUMENT"/>
              <to variable="g_currentDocumentType"/>
             </copy>
             <copy>
              <from expression="'50021'"/>
              <to variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:extraField1"/>
             </copy>
            </assign>
           </otherwise>
          </switch>
         </sequence>
        </scope>
       </sequence>
      </sequence>
     </otherwise>
    </switch>
   </sequence>
  </scope>
  <scope name="RequestProcessing">
   <variables>
    <variable name="forwardIn" messageType="nsxml10:ForwardRequest_v10RequestMessage"/>
    <variable name="forwardOut" messageType="nsxml10:ForwardRequest_v10ResponseMessage"/>
    <variable name="translationIn" messageType="ns7:FormatTransformation_v10RequestMessage"/>
    <variable name="translationOut" messageType="ns7:FormatTransformation_v10ResponseMessage"/>
   </variables>
   <sequence>
    <switch name="switchForward">
     <case condition="(bpws:getVariableData('localMunicipality') = bpws:getVariableData('receivingMunicipality')  and bpws:getVariableData('localMunicipality') != bpws:getVariableData('servingMunicipality') and bpws:getVariableData('wasForwarded') = 'YES')  or bpws:getVariableData('g_currentDocumentType') = bpws:getVariableData('CV_NEGATIVE_DOCUMENT')">
      <bpelx:annotation>
       <bpelx:pattern>failure ocurred or only local translation on forward request and no serving
       </bpelx:pattern>
      </bpelx:annotation>
      <empty name="remote_translation_request_or_negative_document_so_no_processing"/>
     </case>
     <case condition="bpws:getVariableData('servingMunicipality') = bpws:getVariableData('localMunicipality')">
      <bpelx:annotation>
       <bpelx:pattern>no forward to serving municipality
       </bpelx:pattern>
      </bpelx:annotation>
      <sequence name="Sequence_10">
       <scope name="localProcessingScope">
        <variables>
         <variable name="localProcessingIn" messageType="nsxml3:RCRLocalProcessing_v10RequestMessage"/>
         <variable name="localProcessingOut" messageType="nsxml3:RCRLocalProcessing_v10ResponseMessage"/>
        </variables>
        <sequence>
         <assign name="prepareInput">
          <copy>
           <from variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request"/>
           <to variable="localProcessingIn" part="payload" query="/nsxml3:RCRLocalProcessing_v10Request"/>
          </copy>
         </assign>
         <invoke name="invokeLocalProcessing" partnerLink="localProcessingPL" portType="nsxml3:RCRLocalProcessing_v10" operation="initiate" inputVariable="localProcessingIn"/>
         <receive createInstance="no" name="receiveLocalProcessing" partnerLink="localProcessingPL" portType="nsxml3:RCRLocalProcessing_v10Callback" operation="onResult" variable="localProcessingOut"/>
         <assign name="prepareOutput">
          <copy>
           <from variable="localProcessingOut" part="payload" query="/nsxml3:RCRLocalProcessing_v10Response"/>
           <to variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request"/>
          </copy>
          <copy>
           <from expression="number(bpws:getVariableData('requestData','payload','/tns:ResidenceCertifcationRequest_v10Request/nsxml0:extraField4'))"/>
           <to variable="g_currentDocumentType"/>
          </copy>
         </assign>
         <switch name="resetDocumentType">
          <case condition="number(bpws:getVariableData('requestData','payload','/tns:ResidenceCertifcationRequest_v10Request/nsxml0:extraField4'))  = bpws:getVariableData('CV_NEGATIVE_DOCUMENT')">
           <bpelx:annotation>
            <bpelx:pattern>error occurred
            </bpelx:pattern>
           </bpelx:annotation>
           <sequence name="Sequence_29">
            <assign name="setErrorCode">
             <copy>
              <from expression="'50022'"/>
              <to variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:extraField1"/>
             </copy>
            </assign>
            <switch name="Switch_12">
             <case condition="bpws:getVariableData('localProcessingOut','payload','/nsxml3:RCRLocalProcessing_v10Response/nsxml0:extraField3') = 'done'">
              <bpelx:annotation>
               <bpelx:pattern>negative document already filled in
               </bpelx:pattern>
              </bpelx:annotation>
              <assign name="setNegativeDocumentAvailable">
               <copy>
                <from expression="'YES'"/>
                <to variable="negativeDocumentAvailable"/>
               </copy>
              </assign>
             </case>
             <otherwise>
              <empty name="doNothing"/>
             </otherwise>
            </switch>
           </sequence>
          </case>
          <otherwise>
           <assign name="resetCurrentDocumentType">
            <copy>
             <from variable="CV_RESIDENCE_DOCUMENT"/>
             <to variable="g_currentDocumentType"/>
            </copy>
           </assign>
          </otherwise>
         </switch>
        </sequence>
       </scope>
      </sequence>
     </case>
     <otherwise>
      <scope name="forwardRequest">
       <variables>
        <variable name="forwardIn" messageType="nsxml10:ForwardRequest_v10RequestMessage"/>
        <variable name="forwardOut" messageType="nsxml10:ForwardRequest_v10ResponseMessage"/>
       </variables>
       <sequence>
        <assign name="prepareInput">
         <copy>
          <from variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request"/>
          <to variable="forwardIn" part="payload" query="/nsxml10:ForwardRequest_v10Request"/>
         </copy>
         <copy>
          <from variable="servingMunicipality"/>
          <to variable="forwardIn" part="payload" query="/nsxml10:ForwardRequest_v10Request/nsxml0:extraField4"/>
         </copy>
        </assign>
        <invoke name="invokeForward" partnerLink="forwardPL" portType="nsxml10:ForwardRequest_v10" operation="initiate" inputVariable="forwardIn"/>
        <receive createInstance="no" name="receiveForward" partnerLink="forwardPL" portType="nsxml10:ForwardRequest_v10Callback" operation="onResult" variable="forwardOut"/>
        <assign name="prepareOutput">
         <copy>
          <from variable="forwardOut" part="payload" query="/nsxml10:ForwardRequest_v10Response"/>
          <to variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request"/>
         </copy>
         <copy>
          <from variable="forwardOut" part="payload" query="/nsxml10:ForwardRequest_v10Response/nsxml0:extraField1"/>
          <to variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:status"/>
         </copy>
         <copy>
          <from expression="'YES'"/>
          <to variable="g_remoteServingPassed"/>
         </copy>
        </assign>
        <switch name="resetDocumentType">
         <case condition="bpws:getVariableData('requestData','payload','/tns:ResidenceCertifcationRequest_v10Request/nsxml0:status') = 'closed'">
          <bpelx:annotation>
           <bpelx:pattern>negative answer
           </bpelx:pattern>
          </bpelx:annotation>
          <sequence name="Sequence_24">
           <assign name="setNegativeDocumentType">
            <copy>
             <from variable="CV_NEGATIVE_DOCUMENT"/>
             <to variable="g_currentDocumentType"/>
            </copy>
            <copy>
             <from expression="'closed'"/>
             <to variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:status"/>
            </copy>
           </assign>
           <scope name="translateNegativeAnswerToELF">
            <variables>
             <variable name="negativeResponseTranslationIn" messageType="ns7:FormatTransformation_v10RequestMessage"/>
             <variable name="negativeResponseTranslationOut" messageType="ns7:FormatTransformation_v10ResponseMessage"/>
            </variables>
            <sequence name="Sequence_34">
             <assign name="prepareInput">
              <copy>
               <from expression="'EUFtoELF'"/>
               <to variable="negativeResponseTranslationIn" part="payload" query="/ns7:FormatTransformation_v10Request/ns8:typeOfTransformation"/>
              </copy>
              <copy>
               <from expression="'NegativeDocument'"/>
               <to variable="negativeResponseTranslationIn" part="payload" query="/ns7:FormatTransformation_v10Request/ns8:typeOfDocument"/>
              </copy>
              <copy>
               <from variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:reqestDocument"/>
               <to variable="negativeResponseTranslationIn" part="payload" query="/ns7:FormatTransformation_v10Request/ns8:documentToTransform"/>
              </copy>
             </assign>
             <invoke name="Invoke_6" partnerLink="translationPL" portType="ns7:FormatTransformation_v10" operation="process" inputVariable="negativeResponseTranslationIn" outputVariable="negativeResponseTranslationOut"/>
             <assign name="prepareOutput">
              <copy>
               <from variable="negativeResponseTranslationOut" part="payload" query="/ns7:FormatTransformation_v10Response/ns8:transformedDocument"/>
               <to variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:reqestDocument"/>
              </copy>
             </assign>
            </sequence>
           </scope>
          </sequence>
         </case>
         <otherwise>
          <sequence name="Sequence_23">
           <assign name="resetCurrentDocumentType">
            <copy>
             <from variable="CV_RESIDENCE_DOCUMENT"/>
             <to variable="g_currentDocumentType"/>
            </copy>
           </assign>
           <assign name="prepareTranslation">
            <copy>
             <from variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:extraField2"/>
             <to variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:reqDocDigSig"/>
            </copy>
            <copy>
             <from variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:reqestDocument"/>
             <to variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:extraField2"/>
            </copy>
           </assign>
          </sequence>
         </otherwise>
        </switch>
       </sequence>
      </scope>
     </otherwise>
    </switch>
    <switch name="performLocalTranslation">
     <case condition="bpws:getVariableData('localMunicipality') = bpws:getVariableData('receivingMunicipality') and bpws:getVariableData('localMunicipality') != bpws:getVariableData('servingMunicipality')  and bpws:getVariableData('g_currentDocumentType') != bpws:getVariableData('CV_NEGATIVE_DOCUMENT')">
      <bpelx:annotation>
       <bpelx:pattern>translate only
       </bpelx:pattern>
      </bpelx:annotation>
      <sequence name="Sequence_9">
       <assign name="prepareInput">
        <copy>
         <from variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:reqDocDigSig"/>
         <to variable="translationIn" part="payload" query="/ns7:FormatTransformation_v10Request/ns8:documentToTransform"/>
        </copy>
        <copy>
         <from expression="'ResidenceCertificationDocument'"/>
         <to variable="translationIn" part="payload" query="/ns7:FormatTransformation_v10Request/ns8:typeOfDocument"/>
        </copy>
        <copy>
         <from expression="'EUFtoELF'"/>
         <to variable="translationIn" part="payload" query="/ns7:FormatTransformation_v10Request/ns8:typeOfTransformation"/>
        </copy>
       </assign>
       <invoke name="getLocalTranslation" partnerLink="translationPL" portType="ns7:FormatTransformation_v10" operation="process" inputVariable="translationIn" outputVariable="translationOut"/>
       <assign name="prepareOutput">
        <copy>
         <from variable="translationOut" part="payload" query="/ns7:FormatTransformation_v10Response/ns8:transformedDocument"/>
         <to variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:reqestDocument"/>
        </copy>
       </assign>
      </sequence>
     </case>
     <otherwise>
      <empty name="no_local_translation"/>
     </otherwise>
    </switch>
    <switch name="civilServantApproval-IfNoNegativeDocumentYet">
     <case condition="bpws:getVariableData('g_currentDocumentType') = bpws:getVariableData('CV_NEGATIVE_DOCUMENT')">
      <bpelx:annotation>
       <bpelx:pattern>negative document - no result yet
       </bpelx:pattern>
      </bpelx:annotation>
      <empty name="doNothing"/>
     </case>
     <otherwise>
      <scope name="CivilServantResultApproval">
       <variables>
        <variable name="cvInteractionIn" messageType="nsxml4:CivilServantInteraction_v10RequestMessage"/>
        <variable name="cvInteractionOut" messageType="nsxml4:CivilServantInteraction_v10ResponseMessage"/>
       </variables>
       <sequence>
        <assign name="prepareInput">
         <copy>
          <from variable="CV_RESIDENCE_DOCUMENT"/>
          <to variable="cvInteractionIn" part="docType" query="/nsxml4:DocumentType"/>
         </copy>
         <copy>
          <from variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request"/>
          <to variable="cvInteractionIn" part="payload" query="/nsxml4:CivilServantInteraction_v10Request"/>
         </copy>
         <copy>
          <from expression="'open'"/>
          <to variable="cvInteractionIn" part="payload" query="/nsxml4:CivilServantInteraction_v10Request/nsxml0:status"/>
         </copy>
         <copy>
          <from variable="requesterUID"/>
          <to variable="cvInteractionIn" part="payload" query="/nsxml4:CivilServantInteraction_v10Request/nsxml0:extraField4"/>
         </copy>
        </assign>
        <invoke name="invoke-2" partnerLink="civilServantPL" portType="nsxml4:CivilServantInteraction_v10" operation="initiate" inputVariable="cvInteractionIn"/>
        <receive createInstance="no" name="receive-1" partnerLink="civilServantPL" portType="nsxml4:CivilServantInteraction_v10Callback" operation="onResult" variable="cvInteractionOut"/>
        <assign name="prepareOutput">
         <copy>
          <from variable="cvInteractionOut" part="payload" query="/nsxml4:CivilServantInteraction_v10Response"/>
          <to variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request"/>
         </copy>
        </assign>
        <scope name="verifySignature">
         <variables>
          <variable name="verificationIn" messageType="tns:SignedDocumentRequest"/>
          <variable name="verificationOut" messageType="tns:DecisionResponse"/>
         </variables>
         <sequence name="Sequence_25">
          <assign name="prepareInput">
           <copy>
            <from variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:reqestDocument"/>
            <to variable="verificationIn" part="signedXmlDocument" query="/tns:SignedXMLDocument/tns:xmlDocument"/>
           </copy>
           <copy>
            <from variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:uid"/>
            <to variable="verificationIn" part="signedXmlDocument" query="/tns:SignedXMLDocument/tns:userId"/>
           </copy>
           <copy>
            <from variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:ssid"/>
            <to variable="verificationIn" part="signedXmlDocument" query="/tns:SignedXMLDocument/tns:ssid"/>
           </copy>
          </assign>
          <invoke name="getVerification" partnerLink="policyenforcerPL" portType="tns:PolicyEnforcer_v10" operation="VerifyXMLSignature" inputVariable="verificationIn" outputVariable="verificationOut"/>
          <switch name="Switch_7">
           <case condition="bpws:getVariableData('verificationOut','decision','/tns:Decision')">
            <bpelx:annotation>
             <bpelx:pattern>signature ok
             </bpelx:pattern>
            </bpelx:annotation>
            <sequence name="Sequence_26">
             <switch name="Switch_3">
              <case condition="bpws:getVariableData('cvInteractionOut','payload','/nsxml4:CivilServantInteraction_v10Response/nsxml0:status') = 'closed'">
               <bpelx:annotation>
                <bpelx:pattern>rejected
                </bpelx:pattern>
               </bpelx:annotation>
               <assign name="rejected">
                <copy>
                 <from variable="CV_NEGATIVE_DOCUMENT"/>
                 <to variable="g_currentDocumentType"/>
                </copy>
                <copy>
                 <from expression="'50023'"/>
                 <to variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:extraField1"/>
                </copy>
               </assign>
              </case>
              <otherwise>
               <sequence name="Sequence_21">
                <assign name="accepted">
                 <copy>
                  <from variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:reqestDocument"/>
                  <to variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:extraField2"/>
                 </copy>
                </assign>
               </sequence>
              </otherwise>
             </switch>
            </sequence>
           </case>
           <otherwise>
            <assign name="signatureNotOK">
             <copy>
              <from variable="CV_NEGATIVE_DOCUMENT"/>
              <to variable="g_currentDocumentType"/>
             </copy>
             <copy>
              <from expression="'50021'"/>
              <to variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:extraField1"/>
             </copy>
            </assign>
           </otherwise>
          </switch>
         </sequence>
        </scope>
       </sequence>
      </scope>
     </otherwise>
    </switch>
    <switch name="checkForNegativeDocument">
     <case condition="bpws:getVariableData('g_currentDocumentType') = bpws:getVariableData('CV_NEGATIVE_DOCUMENT') and bpws:getVariableData('g_remoteServingPassed') = 'NO'">
      <bpelx:annotation>
       <bpelx:pattern>negative document available and not filled in yet
       </bpelx:pattern>
      </bpelx:annotation>
      <sequence name="Sequence_27">
       <switch name="Switch_13">
        <case condition="bpws:getVariableData('negativeDocumentAvailable') = 'YES'">
         <bpelx:annotation>
          <bpelx:pattern>negative document already filled in
          </bpelx:pattern>
         </bpelx:annotation>
         <empty name="DoNothing"/>
        </case>
        <otherwise>
         <scope name="getNegativeDocument">
          <variables>
           <variable name="negativeIn" messageType="ns9:NegativeResponse_v10RequestMessage"/>
           <variable name="negativeOut" messageType="ns9:NegativeResponse_v10ResponseMessage"/>
          </variables>
          <sequence name="Sequence_30">
           <assign name="prepareInput">
            <copy>
             <from variable="localMunicipality"/>
             <to variable="negativeIn" part="payload" query="/ns9:NegativeResponse_v10Request/nsxml0:extraField1"/>
            </copy>
            <copy>
             <from variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:extraField1"/>
             <to variable="negativeIn" part="payload" query="/ns9:NegativeResponse_v10Request/nsxml0:extraField2"/>
            </copy>
            <copy>
             <from expression="'create'"/>
             <to variable="negativeIn" part="payload" query="/ns9:NegativeResponse_v10Request/nsxml0:extraField3"/>
            </copy>
            <copy>
             <from variable="input" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:reqestDocument"/>
             <to variable="negativeIn" part="payload" query="/ns9:NegativeResponse_v10Request/nsxml0:reqestDocument"/>
            </copy>
           </assign>
           <invoke name="Invoke_3" partnerLink="negativeResponsePL" portType="ns9:NegativeResponse_v10" operation="process" inputVariable="negativeIn" outputVariable="negativeOut"/>
           <assign name="prepareOutput">
            <copy>
             <from variable="negativeOut" part="payload" query="/ns9:NegativeResponse_v10Response/nsxml0:reqestDocument"/>
             <to variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:reqestDocument"/>
            </copy>
           </assign>
          </sequence>
         </scope>
        </otherwise>
       </switch>
       <scope name="signNegativeDocument">
        <variables>
         <variable name="CVSignNegativeIn" messageType="nsxml4:CivilServantInteraction_v10RequestMessage"/>
         <variable name="CVSignNegativeOut" messageType="nsxml4:CivilServantInteraction_v10ResponseMessage"/>
        </variables>
        <sequence name="Sequence_19">
         <assign name="prepareInput">
          <copy>
           <from variable="CV_NEGATIVE_DOCUMENT"/>
           <to variable="CVSignNegativeIn" part="docType" query="/nsxml4:DocumentType"/>
          </copy>
          <copy>
           <from expression="'open'"/>
           <to variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:status"/>
          </copy>
          <copy>
           <from variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request"/>
           <to variable="CVSignNegativeIn" part="payload" query="/nsxml4:CivilServantInteraction_v10Request"/>
          </copy>
          <copy>
           <from variable="CV_NEGATIVE_DOCUMENT"/>
           <to variable="g_currentDocumentType"/>
          </copy>
          <copy>
           <from variable="requesterUID"/>
           <to variable="CVSignNegativeIn" part="payload" query="/nsxml4:CivilServantInteraction_v10Request/nsxml0:extraField4"/>
          </copy>
         </assign>
         <invoke name="Invoke_1" partnerLink="civilServantPL" portType="nsxml4:CivilServantInteraction_v10" operation="initiate" inputVariable="CVSignNegativeIn"/>
         <receive name="Receive_1" partnerLink="civilServantPL" portType="nsxml4:CivilServantInteraction_v10Callback" operation="onResult" variable="CVSignNegativeOut" createInstance="no"/>
         <assign name="prepareOutput">
          <copy>
           <from variable="CVSignNegativeOut" part="payload" query="/nsxml4:CivilServantInteraction_v10Response"/>
           <to variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request"/>
          </copy>
          <copy>
           <from expression="'closed'"/>
           <to variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:status"/>
          </copy>
         </assign>
        </sequence>
       </scope>
       <scope name="translateELFtoEPF">
        <variables>
         <variable name="negativeTranslationIn" messageType="ns7:FormatTransformation_v10RequestMessage"/>
         <variable name="negativeTranslationOut" messageType="ns7:FormatTransformation_v10ResponseMessage"/>
        </variables>
        <sequence name="Sequence_28">
         <assign name="prepareInput">
          <copy>
           <from expression="'NegativeDocument'"/>
           <to variable="negativeTranslationIn" part="payload" query="/ns7:FormatTransformation_v10Request/ns8:typeOfDocument"/>
          </copy>
          <copy>
           <from expression="'ELFtoEPF'"/>
           <to variable="negativeTranslationIn" part="payload" query="/ns7:FormatTransformation_v10Request/ns8:typeOfTransformation"/>
          </copy>
          <copy>
           <from variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:reqestDocument"/>
           <to variable="negativeTranslationIn" part="payload" query="/ns7:FormatTransformation_v10Request/ns8:documentToTransform"/>
          </copy>
         </assign>
         <invoke name="Invoke_2" partnerLink="translationPL" portType="ns7:FormatTransformation_v10" operation="process" inputVariable="negativeTranslationIn" outputVariable="negativeTranslationOut"/>
         <assign name="prepareOutput">
          <copy>
           <from variable="negativeTranslationOut" part="payload" query="/ns7:FormatTransformation_v10Response/ns8:transformedDocument"/>
           <to variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:extraField3"/>
          </copy>
         </assign>
        </sequence>
       </scope>
      </sequence>
     </case>
     <otherwise>
      <empty name="doNothing"/>
     </otherwise>
    </switch>
    <switch name="performRemoteTranslation">
     <case condition="bpws:getVariableData('localMunicipality') != bpws:getVariableData('receivingMunicipality') and bpws:getVariableData('g_currentDocumentType') != bpws:getVariableData('CV_NEGATIVE_DOCUMENT')">
      <bpelx:annotation>
       <bpelx:pattern>remote translation needed and no negative answer yet
       </bpelx:pattern>
      </bpelx:annotation>
      <sequence name="Translation">
       <scope name="getTranslationForRequestELFtoEUF">
        <variables>
         <variable name="requestTranslationIn" messageType="ns7:FormatTransformation_v10RequestMessage"/>
         <variable name="requestTranslationOut" messageType="ns7:FormatTransformation_v10ResponseMessage"/>
        </variables>
        <sequence name="Sequence_13">
         <assign name="prepareInput">
          <copy>
           <from expression="'ELFtoEUF'"/>
           <to variable="requestTranslationIn" part="payload" query="/ns7:FormatTransformation_v10Request/ns8:typeOfTransformation"/>
          </copy>
          <copy>
           <from expression="'ResidenceCertificationDocument'"/>
           <to variable="requestTranslationIn" part="payload" query="/ns7:FormatTransformation_v10Request/ns8:typeOfDocument"/>
          </copy>
          <copy>
           <from variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:reqestDocument"/>
           <to variable="requestTranslationIn" part="payload" query="/ns7:FormatTransformation_v10Request/ns8:documentToTransform"/>
          </copy>
         </assign>
         <invoke name="getTranslation" partnerLink="translationPL" portType="ns7:FormatTransformation_v10" operation="process" inputVariable="requestTranslationIn" outputVariable="requestTranslationOut"/>
         <assign name="prepareOutput">
          <copy>
           <from variable="requestTranslationOut" part="payload" query="/ns7:FormatTransformation_v10Response/ns8:transformedDocument"/>
           <to variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:extraField2"/>
          </copy>
         </assign>
        </sequence>
       </scope>
       <switch name="Switch_6">
        <case condition="bpws:getVariableData('wasForwarded') = 'NO'">
         <bpelx:annotation>
          <bpelx:pattern>if not forwarded
          </bpelx:pattern>
         </bpelx:annotation>
         <scope name="getTranslation">
          <sequence name="Sequence_11">
           <assign name="prepareInput">
            <copy>
             <from variable="input" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request"/>
             <to variable="forwardIn" part="payload" query="/nsxml10:ForwardRequest_v10Request"/>
            </copy>
            <copy>
             <from variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:extraField2"/>
             <to variable="forwardIn" part="payload" query="/nsxml10:ForwardRequest_v10Request/nsxml0:extraField1"/>
            </copy>
            <copy>
             <from variable="receivingMunicipality"/>
             <to variable="forwardIn" part="payload" query="/nsxml10:ForwardRequest_v10Request/nsxml0:extraField4"/>
            </copy>
            <copy>
             <from expression="'YES'"/>
             <to variable="forwardIn" part="payload" query="/nsxml10:ForwardRequest_v10Request/nsxml0:forwarded"/>
            </copy>
            <copy>
             <from variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:reqestDocument"/>
             <to variable="forwardIn" part="payload" query="/nsxml10:ForwardRequest_v10Request/nsxml0:extraField2"/>
            </copy>
           </assign>
           <invoke name="sendRemoteTranslationRequest" partnerLink="forwardPL" portType="nsxml10:ForwardRequest_v10" operation="initiate" inputVariable="forwardIn"/>
           <receive name="getRemoteTranslationResult" partnerLink="forwardPL" portType="nsxml10:ForwardRequest_v10Callback" operation="onResult" variable="forwardOut" createInstance="no"/>
           <assign name="prepareOutput">
            <copy>
             <from variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:reqestDocument"/>
             <to variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:extraField2"/>
            </copy>
            <copy>
             <from variable="forwardOut" part="payload" query="/nsxml10:ForwardRequest_v10Response/nsxml0:reqestDocument"/>
             <to variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:reqestDocument"/>
            </copy>
            <copy>
             <from variable="forwardOut" part="payload" query="/nsxml10:ForwardRequest_v10Response/nsxml0:extraField1"/>
             <to variable="forwardOut" part="payload" query="/nsxml10:ForwardRequest_v10Response/nsxml0:status"/>
            </copy>
           </assign>
           <switch name="Switch_5">
            <case condition="bpws:getVariableData('forwardOut','payload','/nsxml10:ForwardRequest_v10Response/nsxml0:status') = 'closed'">
             <bpelx:annotation>
              <bpelx:pattern>rejected
              </bpelx:pattern>
             </bpelx:annotation>
             <sequence name="Sequence_35">
              <assign name="rejected">
               <copy>
                <from variable="CV_NEGATIVE_DOCUMENT"/>
                <to variable="g_currentDocumentType"/>
               </copy>
               <copy>
                <from variable="forwardOut" part="payload" query="/nsxml10:ForwardRequest_v10Response/nsxml0:extraField2"/>
                <to variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:extraField2"/>
               </copy>
               <copy>
                <from expression="'closed'"/>
                <to variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:status"/>
               </copy>
               <copy>
                <from variable="forwardOut" part="payload" query="/nsxml10:ForwardRequest_v10Response/nsxml0:extraField3"/>
                <to variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:extraField3"/>
               </copy>
              </assign>
              <scope name="translateNegativeResultToELF">
               <variables>
                <variable name="translateNegativeResultIn" messageType="ns7:FormatTransformation_v10RequestMessage"/>
                <variable name="translateNegativeResultOut" messageType="ns7:FormatTransformation_v10ResponseMessage"/>
               </variables>
               <sequence name="Sequence_36">
                <assign name="prepareInput">
                 <copy>
                  <from expression="'EUFtoELF'"/>
                  <to variable="translateNegativeResultIn" part="payload" query="/ns7:FormatTransformation_v10Request/ns8:typeOfTransformation"/>
                 </copy>
                 <copy>
                  <from expression="'NegativeDocument'"/>
                  <to variable="translateNegativeResultIn" part="payload" query="/ns7:FormatTransformation_v10Request/ns8:typeOfDocument"/>
                 </copy>
                 <copy>
                  <from variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:reqestDocument"/>
                  <to variable="translateNegativeResultIn" part="payload" query="/ns7:FormatTransformation_v10Request/ns8:documentToTransform"/>
                 </copy>
                </assign>
                <invoke name="Invoke_7" partnerLink="translationPL" portType="ns7:FormatTransformation_v10" operation="process" inputVariable="translateNegativeResultIn" outputVariable="translateNegativeResultOut"/>
                <assign name="prepareOutput">
                 <copy>
                  <from variable="translateNegativeResultOut" part="payload" query="/ns7:FormatTransformation_v10Response/ns8:transformedDocument"/>
                  <to variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:reqestDocument"/>
                 </copy>
                 <copy>
                  <from variable="translateNegativeResultOut" part="payload" query="/ns7:FormatTransformation_v10Response/ns8:transformedDocument"/>
                  <to variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:extraField2"/>
                 </copy>
                </assign>
               </sequence>
              </scope>
             </sequence>
            </case>
            <otherwise>
             <sequence name="Sequence_20">
              <empty name="accepted"/>
             </sequence>
            </otherwise>
           </switch>
          </sequence>
         </scope>
        </case>
        <otherwise>
         <empty name="wasForwardedforServingSoUseResponseBelow"/>
        </otherwise>
       </switch>
      </sequence>
     </case>
     <otherwise>
      <empty name="no_translation"/>
     </otherwise>
    </switch>
    <switch name="wasForwarded">
     <case condition="bpws:getVariableData('wasForwarded') = 'NO'">
      <bpelx:annotation>
       <bpelx:pattern>process complete - deliver document
       </bpelx:pattern>
      </bpelx:annotation>
      <scope name="UserInteraction">
       <variables>
        <variable name="userInteractionIn" messageType="nsxml7:UserInteraction_v10RequestMessage"/>
        <variable name="userInteractionOut" messageType="nsxml7:UserInteraction_v10ResponseMessage"/>
       </variables>
       <sequence>
        <switch name="Switch_1">
         <case condition="bpws:getVariableData('g_currentDocumentType') = bpws:getVariableData('CV_NEGATIVE_DOCUMENT')">
          <bpelx:annotation>
           <bpelx:pattern>received negative document
           </bpelx:pattern>
          </bpelx:annotation>
          <sequence name="Sequence_17">
           <scope name="NotifyUserNegative">
            <variables>
             <variable name="notificationIn" messageType="ns6:NotificationBuilderRequestRequestMessage"/>
            </variables>
            <sequence name="Sequence_15">
             <bpelx:exec name="readProcessFiles" language="Java" version="1.4"><![CDATA[

System.out.println("---1---");
Element input = (Element) getVariableData("input","payload","/tns:ResidenceCertifcationRequest_v10Request/nsxml0:reqestDocument");
System.out.println("---2---");
MessageUtils utils = new MessageUtils(input.getNodeValue(),"RCFailed");
System.out.println("---3---");
setVariableData("notificationIn","data","/ns6:NotificationBuilderRequestComposeType/ns6:data/ns5:message",utils.getMessageTemplate());
System.out.println("---4---");
setVariableData("notificationIn","data","/ns6:NotificationBuilderRequestComposeType/ns6:data/ns5:mapping",utils.getMessageMapping());
System.out.println("---5---");
setVariableData("notificationIn","data","/ns6:NotificationBuilderRequestComposeType/ns6:data/ns5:profile",input.getNodeValue());
System.out.println("---6---");]]>
             </bpelx:exec>
             <assign name="prepareNotificationInput">
              <copy>
               <from expression="'Residence Certification Request failed'"/>
               <to variable="notificationIn" part="data" query="/ns6:NotificationBuilderRequestComposeType/ns6:data/ns5:subject"/>
              </copy>
              <copy>
               <from expression="'error'"/>
               <to variable="notificationIn" part="data" query="/ns6:NotificationBuilderRequestComposeType/ns6:data/ns5:qualifier"/>
              </copy>
              <copy>
               <from variable="input" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:ssid"/>
               <to variable="notificationIn" part="request" query="/ns6:NotificationBuilderRequestProcessRequest/ns6:request/nsxml0:ssid"/>
              </copy>
              <copy>
               <from variable="input" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:uid"/>
               <to variable="notificationIn" part="request" query="/ns6:NotificationBuilderRequestProcessRequest/ns6:request/nsxml0:uid"/>
              </copy>
             </assign>
             <invoke name="invokeNotification" partnerLink="notificationPL" portType="ns6:NotificationBuilderRequest" operation="initiate" inputVariable="notificationIn"/>
            </sequence>
           </scope>
           <switch name="Switch_8">
            <case condition="bpws:getVariableData('g_currentDocumentType') = bpws:getVariableData('CV_NEGATIVE_DOCUMENT')">
             <empty name="Empty_1"/>
            </case>
            <otherwise>
             <scope name="translateELFtoEPF">
              <variables>
               <variable name="negativeTranslationIn" messageType="ns7:FormatTransformation_v10RequestMessage"/>
               <variable name="negativeTranslationOut" messageType="ns7:FormatTransformation_v10ResponseMessage"/>
              </variables>
              <sequence name="Sequence_18">
               <assign name="completeInput">
                <copy>
                 <from expression="'ELFtoEPF'"/>
                 <to variable="negativeTranslationIn" part="payload" query="/ns7:FormatTransformation_v10Request/ns8:typeOfTransformation"/>
                </copy>
                <copy>
                 <from expression="'NegativeDocument'"/>
                 <to variable="negativeTranslationIn" part="payload" query="/ns7:FormatTransformation_v10Request/ns8:typeOfDocument"/>
                </copy>
                <copy>
                 <from variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:reqestDocument"/>
                 <to variable="negativeTranslationIn" part="payload" query="/ns7:FormatTransformation_v10Request/ns8:documentToTransform"/>
                </copy>
               </assign>
               <invoke name="invokeTranslation" partnerLink="translationPL" portType="ns7:FormatTransformation_v10" operation="process" inputVariable="negativeTranslationIn" outputVariable="negativeTranslationOut"/>
               <assign name="prepareOutput">
                <copy>
                 <from variable="negativeTranslationOut" part="payload" query="/ns7:FormatTransformation_v10Response/ns8:transformedDocument"/>
                 <to variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:extraField3"/>
                </copy>
               </assign>
              </sequence>
             </scope>
            </otherwise>
           </switch>
           <assign name="prepareUserInteractionInput">
            <copy>
             <from variable="CV_NEGATIVE_DOCUMENT"/>
             <to variable="userInteractionIn" part="docType" query="/nsxml7:DocumentType"/>
            </copy>
            <copy>
             <from expression="'closed'"/>
             <to variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:status"/>
            </copy>
            <copy>
             <from variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request"/>
             <to variable="userInteractionIn" part="payload" query="/nsxml7:UserInteraction_v10Request"/>
            </copy>
            <copy>
             <from variable="input" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:uid"/>
             <to variable="userInteractionIn" part="payload" query="/nsxml7:UserInteraction_v10Request/nsxml0:uid"/>
            </copy>
            <copy>
             <from variable="requesterUID"/>
             <to variable="userInteractionIn" part="payload" query="/nsxml7:UserInteraction_v10Request/nsxml0:extraField4"/>
            </copy>
           </assign>
          </sequence>
         </case>
         <otherwise>
          <sequence name="Sequence_16">
           <scope name="NotifyUserPositive">
            <variables>
             <variable name="Invoke_initiate_InputVariable" messageType="ns6:NotificationBuilderRequestRequestMessage"/>
            </variables>
            <sequence>
             <bpelx:exec import="org.emayor.bpel.tools.MessageUtils"/>
             <bpelx:exec name="readProcessFiles" language="Java" version="1.4"><![CDATA[

System.out.println("---1---");
Element input = (Element) getVariableData("input","payload","/tns:ResidenceCertifcationRequest_v10Request/nsxml0:reqestDocument");
System.out.println("---2---");
MessageUtils utils = new MessageUtils(input.getNodeValue(),"RCRequest");
System.out.println("---3---");
setVariableData("Invoke_initiate_InputVariable","data","/ns6:NotificationBuilderRequestComposeType/ns6:data/ns5:message",utils.getMessageTemplate());
System.out.println("---4---");
setVariableData("Invoke_initiate_InputVariable","data","/ns6:NotificationBuilderRequestComposeType/ns6:data/ns5:mapping",utils.getMessageMapping());
System.out.println("---5---");
setVariableData("Invoke_initiate_InputVariable","data","/ns6:NotificationBuilderRequestComposeType/ns6:data/ns5:profile",input.getNodeValue());
System.out.println("---6---");
]]>
             </bpelx:exec>
             <bpelx:exec import="org.w3c.dom.Element"/>
             <bpelx:exec import="javax.xml.transform.Transformer"/>
             <bpelx:exec import="javax.xml.transform.TransformerException"/>
             <bpelx:exec import="javax.xml.transform.TransformerFactory"/>
             <bpelx:exec import="javax.xml.transform.dom.DOMSource"/>
             <bpelx:exec import="javax.xml.transform.stream.StreamResult"/>
             <bpelx:exec import="java.io.StringWriter"/>
             <assign name="prepareNotificationInput">
              <copy>
               <from expression="&quot;Residence Certification Document ready for retrieval&quot;"/>
               <to variable="Invoke_initiate_InputVariable" part="data" query="/ns6:NotificationBuilderRequestComposeType/ns6:data/ns5:subject"/>
              </copy>
              <copy>
               <from expression="&quot;completion&quot;"/>
               <to variable="Invoke_initiate_InputVariable" part="data" query="/ns6:NotificationBuilderRequestComposeType/ns6:data/ns5:qualifier"/>
              </copy>
              <copy>
               <from variable="input" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:ssid"/>
               <to variable="Invoke_initiate_InputVariable" part="request" query="/ns6:NotificationBuilderRequestProcessRequest/ns6:request/nsxml0:ssid"/>
              </copy>
              <copy>
               <from variable="input" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:uid"/>
               <to variable="Invoke_initiate_InputVariable" part="request" query="/ns6:NotificationBuilderRequestProcessRequest/ns6:request/nsxml0:uid"/>
              </copy>
             </assign>
             <invoke name="invokeNotification" partnerLink="notificationPL" portType="ns6:NotificationBuilderRequest" operation="initiate" inputVariable="Invoke_initiate_InputVariable"/>
            </sequence>
           </scope>
           <scope name="tranlateELFtoEPF">
            <variables>
             <variable name="translationForUserERFtoEPFIn" messageType="ns7:FormatTransformation_v10RequestMessage"/>
             <variable name="translationForUserERFtoEPFOut" messageType="ns7:FormatTransformation_v10ResponseMessage"/>
            </variables>
            <sequence name="Sequence_14">
             <assign name="completeInput">
              <copy>
               <from expression="'ELFtoEPF'"/>
               <to variable="translationForUserERFtoEPFIn" part="payload" query="/ns7:FormatTransformation_v10Request/ns8:typeOfTransformation"/>
              </copy>
              <copy>
               <from expression="'ResidenceCertificationDocument'"/>
               <to variable="translationForUserERFtoEPFIn" part="payload" query="/ns7:FormatTransformation_v10Request/ns8:typeOfDocument"/>
              </copy>
              <copy>
               <from variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:extraField2"/>
               <to variable="translationForUserERFtoEPFIn" part="payload" query="/ns7:FormatTransformation_v10Request/ns8:documentToTransform"/>
              </copy>
             </assign>
             <invoke name="invokeTranslation" partnerLink="translationPL" portType="ns7:FormatTransformation_v10" operation="process" inputVariable="translationForUserERFtoEPFIn" outputVariable="translationForUserERFtoEPFOut"/>
             <assign name="prepareOutput">
              <copy>
               <from variable="translationForUserERFtoEPFOut" part="payload" query="/ns7:FormatTransformation_v10Response/ns8:transformedDocument"/>
               <to variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:extraField3"/>
              </copy>
             </assign>
            </sequence>
           </scope>
           <assign name="prepareUserInteractionInput">
            <copy>
             <from expression="'closed'"/>
             <to variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:status"/>
            </copy>
            <copy>
             <from variable="CV_RESIDENCE_DOCUMENT"/>
             <to variable="userInteractionIn" part="docType" query="/nsxml7:DocumentType"/>
            </copy>
            <copy>
             <from variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request"/>
             <to variable="userInteractionIn" part="payload" query="/nsxml7:UserInteraction_v10Request"/>
            </copy>
            <copy>
             <from variable="input" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:uid"/>
             <to variable="userInteractionIn" part="payload" query="/nsxml7:UserInteraction_v10Request/nsxml0:uid"/>
            </copy>
            <copy>
             <from variable="requesterUID"/>
             <to variable="userInteractionIn" part="payload" query="/nsxml7:UserInteraction_v10Request/nsxml0:extraField4"/>
            </copy>
           </assign>
          </sequence>
         </otherwise>
        </switch>
        <switch name="Switch_10">
         <case condition="bpws:getVariableData('RequesterRole') = 'Citizen'">
          <bpelx:annotation>
           <bpelx:pattern>is citizen
           </bpelx:pattern>
          </bpelx:annotation>
          <empty name="doNothing"/>
         </case>
         <otherwise>
          <assign name="setIDtoCivilServant">
           <copy>
            <from expression="'Civil Servant'"/>
            <to variable="userInteractionIn" part="payload" query="/nsxml7:UserInteraction_v10Request/nsxml0:uid"/>
           </copy>
          </assign>
         </otherwise>
        </switch>
        <invoke name="invoke-3" partnerLink="userInteractionPL" portType="nsxml7:UserInteraction_v10" operation="initiate" inputVariable="userInteractionIn"/>
        <receive createInstance="no" name="receive-2" partnerLink="userInteractionPL" portType="nsxml7:UserInteraction_v10Callback" operation="onResult" variable="userInteractionOut"/>
        <assign name="prepareOutput">
         <copy>
          <from variable="userInteractionOut" part="payload" query="/nsxml7:UserInteraction_v10Response"/>
          <to variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request"/>
         </copy>
        </assign>
       </sequence>
      </scope>
     </case>
     <otherwise>
      <sequence>
       <scope name="responseForward">
        <variables>
         <variable name="forwardIn" messageType="nsxml11:ForwardResponse_v10RequestMessage"/>
         <variable name="responseNegativeTranslationIn" messageType="ns7:FormatTransformation_v10RequestMessage"/>
         <variable name="responseNegativeTranslationOut" messageType="ns7:FormatTransformation_v10ResponseMessage"/>
        </variables>
        <sequence>
         <assign name="prepareInput">
          <copy>
           <from variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request"/>
           <to variable="forwardIn" part="payload" query="/nsxml11:ForwardResponse_v10Request"/>
          </copy>
          <copy>
           <from variable="input" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:ssid"/>
           <to variable="forwardIn" part="payload" query="/nsxml11:ForwardResponse_v10Request/nsxml0:ssid"/>
          </copy>
          <copy>
           <from variable="input" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:uid"/>
           <to variable="forwardIn" part="payload" query="/nsxml11:ForwardResponse_v10Request/nsxml0:uid"/>
          </copy>
          <copy>
           <from variable="input" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:serviceId"/>
           <to variable="forwardIn" part="payload" query="/nsxml11:ForwardResponse_v10Request/nsxml0:serviceId"/>
          </copy>
          <copy>
           <from variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:status"/>
           <to variable="forwardIn" part="payload" query="/nsxml11:ForwardResponse_v10Request/nsxml0:extraField1"/>
          </copy>
         </assign>
         <switch name="setRemoteMunicipality">
          <case condition="bpws:getVariableData('localMunicipality') = bpws:getVariableData('servingMunicipality')">
           <bpelx:annotation>
            <bpelx:pattern>local is serving
            </bpelx:pattern>
           </bpelx:annotation>
           <assign name="localIsServing">
            <copy>
             <from variable="receivingMunicipality"/>
             <to variable="forwardIn" part="payload" query="/nsxml11:ForwardResponse_v10Request/nsxml0:extraField4"/>
            </copy>
           </assign>
          </case>
          <otherwise>
           <assign name="localIsReceiving">
            <copy>
             <from variable="servingMunicipality"/>
             <to variable="forwardIn" part="payload" query="/nsxml11:ForwardResponse_v10Request/nsxml0:extraField4"/>
            </copy>
           </assign>
          </otherwise>
         </switch>
         <switch name="Switch_15">
          <case condition="bpws:getVariableData('g_currentDocumentType') = '5002'  or bpws:getVariableData('negativeDocumentAvailable') = 'YES'">
           <bpelx:annotation>
            <bpelx:pattern>is negative document in ELF
            </bpelx:pattern>
           </bpelx:annotation>
           <sequence name="Sequence_33">
            <assign name="prepareInput">
             <copy>
              <from expression="'ELFtoEUF'"/>
              <to variable="responseNegativeTranslationIn" part="payload" query="/ns7:FormatTransformation_v10Request/ns8:typeOfTransformation"/>
             </copy>
             <copy>
              <from expression="'NegativeDocument'"/>
              <to variable="responseNegativeTranslationIn" part="payload" query="/ns7:FormatTransformation_v10Request/ns8:typeOfDocument"/>
             </copy>
             <copy>
              <from variable="forwardIn" part="payload" query="/nsxml11:ForwardResponse_v10Request/nsxml0:reqestDocument"/>
              <to variable="responseNegativeTranslationIn" part="payload" query="/ns7:FormatTransformation_v10Request/ns8:documentToTransform"/>
             </copy>
            </assign>
            <invoke name="Invoke_5" partnerLink="translationPL" portType="ns7:FormatTransformation_v10" operation="process" inputVariable="responseNegativeTranslationIn" outputVariable="responseNegativeTranslationOut"/>
            <assign name="prepareOutput">
             <copy>
              <from variable="responseNegativeTranslationOut" part="payload" query="/ns7:FormatTransformation_v10Response/ns8:transformedDocument"/>
              <to variable="forwardIn" part="payload" query="/nsxml11:ForwardResponse_v10Request/nsxml0:reqestDocument"/>
             </copy>
             <copy>
              <from expression="'closed'"/>
              <to variable="forwardIn" part="payload" query="/nsxml11:ForwardResponse_v10Request/nsxml0:extraField1"/>
             </copy>
            </assign>
           </sequence>
          </case>
          <otherwise>
           <empty name="doNothing"/>
          </otherwise>
         </switch>
         <invoke name="invoke-2" partnerLink="forwardResponsePL" portType="nsxml11:ForwardResponse_v10" operation="initiate" inputVariable="forwardIn"/>
        </sequence>
       </scope>
      </sequence>
     </otherwise>
    </switch>
   </sequence>
  </scope>
  <assign name="finalOutputPreparation">
   <copy>
    <from variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:uid"/>
    <to variable="callbackIn" part="result" query="/nsxml9:result/uid"/>
   </copy>
   <copy>
    <from variable="requestData" part="payload" query="/tns:ResidenceCertifcationRequest_v10Request/nsxml0:ssid"/>
    <to variable="callbackIn" part="result" query="/nsxml9:result/ssid"/>
   </copy>
   <copy>
    <from expression="'OK'"/>
    <to variable="callbackIn" part="result" query="/nsxml9:result/requestDocument"/>
   </copy>
  </assign>
  <invoke name="callbackClient" partnerLink="callbackMgrPartnerLink" portType="nsxml9:IServiceCallbackManager" operation="onResult" inputVariable="callbackIn" outputVariable="callbackOut"/>
 </sequence>
</process>
