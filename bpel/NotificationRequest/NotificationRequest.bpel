<!-- NotificationRequest BPEL Process [Generated by the Oracle BPEL Designer] -->
<process name="NotificationRequest" targetNamespace="http://emayor.org/NotificationRequest" suppressJoinFailure="yes" xmlns="http://schemas.xmlsoap.org/ws/2003/03/business-process/" xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/" xmlns:tns="http://emayor.org/NotificationRequest" xmlns:ns4="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.ExtFunc" xmlns:ns1="http://www.w3.org/2001/XMLSchema" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:ns3="http://schemas.oracle.com/xpath/extension/ldap" xmlns:ns5="http://schemas.xmlsoap.org/ws/2003/03/business-process/" xmlns:ns2="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20" xmlns:bpelx="http://schemas.oracle.com/bpel/extension" xmlns:ora="http://schemas.oracle.com/xpath/extension" xmlns:nsxml0="http://emayor.org/IForward">
 <bpelx:exec import="javax.naming.Context"/>
 <bpelx:exec import="javax.naming.InitialContext"/>
 <bpelx:exec import="java.util.Properties"/>
 <bpelx:exec import="org.emayor.notification.wrapper.interfaces.BPELNotificationWrapperHome"/>
 <bpelx:exec import="org.emayor.notification.wrapper.interfaces.BPELNotificationWrapper"/>
 <bpelx:exec import="org.emayor.notification.exception.NotificationException"/>
 <bpelx:exec import="javax.rmi.PortableRemoteObject"/>
 <bpelx:exec import="java.rmi.RemoteException"/>
 <bpelx:exec import="javax.naming.NamingException"/>
 <bpelx:exec import="javax.ejb.CreateException"/>
 <bpelx:exec import="org.apache.log4j.Logger"/>
 <bpelx:exec import="org.w3c.dom.Element"/>
 <bpelx:exec import="org.w3c.dom.NodeList"/>
 <bpelx:exec import="org.w3c.dom.Document"/>
 <bpelx:exec import="org.w3c.dom.DOMImplementation"/>
 <bpelx:exec import="javax.xml.parsers.DocumentBuilderFactory"/>
 <bpelx:exec import="javax.xml.parsers.DocumentBuilder"/>
 <bpelx:exec import="org.apache.xml.serialize.XMLSerializer"/>
 <bpelx:exec import="org.apache.xml.serialize.OutputFormat"/>
 <bpelx:exec import="java.io.StringWriter"/>
 <bpelx:exec import="java.util.Date"/>
 <bpelx:exec import="org.w3c.dom.DOMException"/>
 <bpelx:exec import="javax.xml.parsers.ParserConfigurationException"/>
 <bpelx:exec import="javax.xml.transform.Transformer"/>
 <bpelx:exec import="javax.xml.transform.TransformerException"/>
 <bpelx:exec import="javax.xml.transform.TransformerFactory"/>
 <bpelx:exec import="javax.xml.transform.dom.DOMSource"/>
 <bpelx:exec import="javax.xml.transform.stream.StreamResult"/><!-- ================================================================= --><!-- PARTNERLINKS                                                      --><!-- List of services participating in this BPEL process               --><!-- ================================================================= -->
 <partnerLinks><!-- The 'client' role represents the requester of this service. -->
  <partnerLink name="client" partnerLinkType="tns:NotificationRequest" myRole="NotificationRequestProvider"/>
 </partnerLinks><!-- ================================================================= --><!-- VARIABLES                                                         --><!-- List of messages and XML documents used within this BPEL process  --><!-- ================================================================= -->
 <variables><!-- Reference to the message passed as input during initiation -->
  <variable name="input" messageType="tns:NotificationRequestRequestMessage"/><!-- 
          Reference to the message that will be returned to the requester
          -->
  <variable name="output" messageType="tns:NotificationRequestResponseMessage"/>
  <variable name="NotificationDocument" element="tns:NotificationDocument"/>
  <variable name="NotificationDocumentMessage" type="ns1:string"/>
 </variables><!-- ================================================================= --><!-- ORCHESTRATION LOGIC                                               --><!-- Set of activities coordinating the flow of messages across the    --><!-- services integrated within this business process                  --><!-- ================================================================= -->
 <sequence>
  <receive createInstance="yes" name="receive-2" partnerLink="client" portType="tns:NotificationRequest" operation="process" variable="input"/>
  <sequence>
   <sequence name="main"><!-- Receive input from requester. 
             Note: This maps to operation defined in NotificationRequest.wsdl 
             --><!-- Generate reply to synchronous request -->
    <assign name="createDocument">
     <copy>
      <from variable="input" part="payload" query="/tns:NotificationRequestDocument/tns:NotificationQualifier"/>
      <to variable="NotificationDocument" query="/tns:NotificationDocument/tns:NotificationQualifier"/>
     </copy>
     <copy>
      <from variable="input" part="payload" query="/tns:NotificationRequestDocument/tns:TransactionId"/>
      <to variable="NotificationDocument" query="/tns:NotificationDocument/tns:TransactionId"/>
     </copy>
     <copy>
      <from variable="input" part="payload" query="/tns:NotificationRequestDocument/tns:NotificationMessage"/>
      <to variable="NotificationDocument" query="/tns:NotificationDocument/tns:NotificationMessage"/>
     </copy>
     <copy>
      <from expression="ora:getCurrentDateTime(&quot;EEE, d MMM yyyy HH:mm:ss Z&quot;)"/>
      <to variable="NotificationDocument" query="/tns:NotificationDocument/tns:Timestamp"/>
     </copy>
     <copy>
      <from expression="ora:getContentAsString(ns5:getVariableData('NotificationDocument','/tns:NotificationDocument'))"/>
      <to variable="NotificationDocumentMessage"/>
     </copy>
    </assign>
    <bpelx:exec xmlns:bpelx="http://schemas.oracle.com/bpel/extension" language="java" version="1.4" name="sendMessage"><![CDATA[// Java code snippet goes here ... 
			
			Logger log = Logger.getLogger("BPEL Debug");
			
			// a message contains several strings
			String[] msg = null;
			
			// catch exception messages
			String result = null;
			
			// for input processing
			Element input = null;
			
			// input nodes
			NodeList nodes = null;
			
			// message subject
			String subject = null;
			
			// message content
			String body = null;
			
			// message medium
			String medium = null;
			
			// userId
			String userId = null;
			
      // sessionID
      String ssId = null;
    
			int i;
		
			try {

	            	/* get userId */
	            	input = (Element) getVariableData("input","payload","/tns:NotificationRequestDocument/tns:UserId");
					
					nodes = input.getChildNodes();
					for (i=0;i<nodes.getLength();i++) {
						if (nodes.item(i).getNodeType() == org.w3c.dom.Node.TEXT_NODE) {
							userId = nodes.item(i).getNodeValue();
							log.info("UserID: "+userId);
							break;
						}
					}
	
		            if (userId == null) {
						throw new Exception("No userId specified");
					}
		        

	            	/* get sessionId */
	            	input = (Element) getVariableData("input","payload","/tns:NotificationRequestDocument/tns:TransactionId");
					
					nodes = input.getChildNodes();
					for (i=0;i<nodes.getLength();i++) {
						if (nodes.item(i).getNodeType() == org.w3c.dom.Node.TEXT_NODE) {
							ssId = nodes.item(i).getNodeValue();
							log.info("SessionID: "+ssId);
							break;
						}
					}
	
		            if (ssId == null) {
						throw new Exception("No sessionId specified");
					}
          
          
               	/* get notification medium */
	            	input = (Element) getVariableData("input","payload","/tns:NotificationRequestDocument/tns:NotificationMedium");
					
					nodes = input.getChildNodes();
					for (i=0;i<nodes.getLength();i++) {
						if (nodes.item(i).getNodeType() == org.w3c.dom.Node.TEXT_NODE) {
							medium = nodes.item(i).getNodeValue();
							log.info("Medium: "+medium);
							break;
						}
					}
						
					if (medium == null) {
						throw new Exception("No notification medium specified");
					}
	
		           	/* get notification subject */					
					input = (Element) getVariableData("input","payload","/tns:NotificationRequestDocument/tns:NotificationSubject");
					
					nodes = input.getChildNodes();
					for (i=0;i<nodes.getLength();i++) {
						if (nodes.item(i).getNodeType() == org.w3c.dom.Node.TEXT_NODE) {
							subject = nodes.item(i).getNodeValue();
							log.info("Subject: "+subject);
							break;
						}
					}
						
					if (subject == null) {
						throw new Exception("No subject specified");
					}
					
					/* get notification body */					
					input = (Element) getVariableData("input","payload","/tns:NotificationRequestDocument/tns:NotificationMessage");
					
					nodes = input.getChildNodes();
					for (i=0;i<nodes.getLength();i++) {
						if (nodes.item(i).getNodeType() == org.w3c.dom.Node.TEXT_NODE) {
							body = nodes.item(i).getNodeValue();
							log.info("Body: "+body);
							break;
						}
					}

					if (body == null) {
						throw new Exception("No notification medium specified");
					}

					/* get notification document */					
          String message;
					log.info("get document ... ");
          message = (String) getVariableData("NotificationDocumentMessage");
					//input = (Element) getVariableData("NotificationDocumentMessage");

					/*
	                log.info("get document factory ...");					
					DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
			       	factory.setNamespaceAware(true);
					DocumentBuilder builder = factory.newDocumentBuilder();
					DOMImplementation impl = builder.getDOMImplementation();
	                log.info("create document ...");
	                Document doc = impl.createDocument(null,"document",null);
   	                log.info("import root element ...");
	                doc.importNode(input,true);
   	                log.info("set up output ...");
	                OutputFormat format = new OutputFormat (doc);
					StringWriter message = new StringWriter();
	                log.info("serialize xml ...");
					XMLSerializer serial = new XMLSerializer( message, format );
					serial.asDOMSerializer();
					serial.serialize(input);
					*/
					/*
					Transformer t = TransformerFactory.newInstance().newTransformer();
					StringWriter message = new StringWriter();
					t.transform(new DOMSource(input), new StreamResult(message));
          */
          
          //String message = input.getNodeValue();
					log.info("message output:"+message);
						                
	                log.info("set up properties ...");
	            
	            	/* set up properties */
					Properties prop = new Properties();
					prop.setProperty("javax.naming.factory.initial","org.jnp.interfaces.NamingContextFactory");
					prop.setProperty("javax.naming.factory.url.pkgs","org.jboss.naming:org.jnp.interfaces");
					prop.setProperty("javax.naming.provider.url","localhost:1099");
					prop.put(Context.INITIAL_CONTEXT_FACTORY, "org.jnp.interfaces.NamingContextFactory");
					prop.put(Context.PROVIDER_URL, "localhost:1099");
				
	                log.info("get context ...");
					Context context = new InitialContext(prop);
					
	                log.info("lookup ...");
					Object ref = context.lookup("ejb/BPELNotificationWrapper");
					
	                log.info("narrow home object ...");
					BPELNotificationWrapperHome home = (BPELNotificationWrapperHome) PortableRemoteObject.narrow(ref,BPELNotificationWrapperHome.class);
					
	                log.info("get wrapper instance ...");
					BPELNotificationWrapper wrapper = home.create();
					
					if (medium.equals("email")) {
						log.info("creating email parameters ...");
						msg = new String[5];
						msg[0]=userId;
						msg[1]=subject;
						msg[2]=body;
						msg[3]=message.toString();
            msg[4]=ssId;
					} else {
						throw new Exception("medium not yet implemented");
					}
					
					if (msg != null) {
		                log.info("sending message to wrapper ...");
						wrapper.sendNotificationMessage(medium,msg);
					}
				
				} catch (NamingException e) {
					result = e.getMessage();
					e.printStackTrace();
				} catch (RemoteException e) {
					result = e.getMessage();
					e.printStackTrace();
				} catch (CreateException e) {
					result = e.getMessage();
					e.printStackTrace();
				} catch (NotificationException e) {
					result = e.getMessage();
					e.printStackTrace();
				} catch (Exception e) {
					result = e.getMessage();
					e.printStackTrace();
				}
				
				result = result == null ? "DONE" : result;
				log.info(result);
				
				//log.info(input);
			
			]]>
    </bpelx:exec>
    <reply name="replyOutput" partnerLink="client" portType="tns:NotificationRequest" operation="process" variable="output"/>
   </sequence>
  </sequence>
 </sequence>
</process>
